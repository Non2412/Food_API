import 'package:flutter/material.dart';
import 'package:food_api/model.dart';
import 'category_detail.dart';

class RestaurantCountryPage extends StatelessWidget {
  final List<Restaurant> restaurants;

  const RestaurantCountryPage({Key? key, required this.restaurants}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    Map<String, List<Restaurant>> restaurantsByCountry = {};
    for (var restaurant in restaurants) {
      if (!restaurantsByCountry.containsKey(restaurant.country)) {
        restaurantsByCountry[restaurant.country] = [];
      }
      restaurantsByCountry[restaurant.country]!.add(restaurant);
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®'),
        backgroundColor: Colors.orange,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.orange.shade50, Colors.white],
          ),
        ),
        child: ListView.builder(
          padding: const EdgeInsets.all(16.0),
          itemCount: restaurantsByCountry.keys.length,
          itemBuilder: (context, index) {
            final country = restaurantsByCountry.keys.elementAt(index);
            final countryRestaurants = restaurantsByCountry[country]!;
            final dishes = countryRestaurants.expand((r) => r.dishes.map((d) => d.name)).toList();

            // ‡∏´‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            String countryIcon = _getCountryIcon(country);
            
            return Card(
              margin: const EdgeInsets.only(bottom: 12),
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16),
                  gradient: LinearGradient(
                    colors: [Colors.white, Colors.grey.shade50],
                  ),
                ),
                child: ListTile(
                  contentPadding: const EdgeInsets.all(16),
                  leading: Container(
                    width: 60,
                    height: 60,
                    decoration: BoxDecoration(
                      color: Colors.orange.shade100,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Text(
                        countryIcon,
                        style: const TextStyle(fontSize: 28),
                      ),
                    ),
                  ),
                  title: Text(
                    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£$country',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.grey[800],
                    ),
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Text(
                        '${countryRestaurants.length} ‡∏£‡πâ‡∏≤‡∏ô ‚Ä¢ ${dishes.length} ‡πÄ‡∏°‡∏ô‡∏π',
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          const Icon(Icons.star, color: Colors.amber, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            '${_getAverageRating(countryRestaurants).toStringAsFixed(1)}',
                            style: TextStyle(
                              fontWeight: FontWeight.w600,
                              color: Colors.grey[700],
                            ),
                          ),
                          const SizedBox(width: 16),
                          Icon(Icons.access_time, color: Colors.grey[400], size: 16),
                          const SizedBox(width: 4),
                          Text(
                            '${_getAverageDeliveryTime(countryRestaurants)} ‡∏ô‡∏≤‡∏ó‡∏µ',
                            style: TextStyle(color: Colors.grey[600]),
                          ),
                        ],
                      ),
                    ],
                  ),
                  trailing: Container(
                    decoration: BoxDecoration(
                      color: Colors.orange,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    padding: const EdgeInsets.all(8),
                    child: const Icon(
                      Icons.arrow_forward_ios,
                      color: Colors.white,
                      size: 16,
                    ),
                  ),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => CategoryDetailPage(
                          country: country,
                          dishes: dishes,
                          restaurants: countryRestaurants, restaurant: countryRestaurants.isNotEmpty ? countryRestaurants[0] : Restaurant(
                            id: 0,
                            name: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                            cuisine: '',
                            rating: 0.0,
                            deliveryTime: '0-0',
                            deliveryFee: 0,
                            image: '',
                            popular: false,
                            dishes: [],
                            country: country,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  String _getCountryIcon(String country) {
    switch (country) {
      case '‡πÑ‡∏ó‡∏¢':
        return 'üáπüá≠';
      case '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô':
        return 'üáØüáµ';
      case '‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ':
        return 'üáÆüáπ';
      case '‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô':
        return 'üá∫üá∏';
      case '‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢':
        return 'üåè';
      default:
        return 'üçΩÔ∏è';
    }
  }

  double _getAverageRating(List<Restaurant> restaurants) {
    if (restaurants.isEmpty) return 0.0;
    double total = restaurants.fold(0.0, (sum, restaurant) => sum + restaurant.rating);
    return total / restaurants.length;
  }

  String _getAverageDeliveryTime(List<Restaurant> restaurants) {
    if (restaurants.isEmpty) return '0';
    int total = 0;
    int count = 0;
    
    for (var restaurant in restaurants) {
      var times = restaurant.deliveryTime.split('-');
      if (times.isNotEmpty) {
        total += int.tryParse(times[0]) ?? 0;
        count++;
      }
    }
    
    return count > 0 ? (total / count).round().toString() : '0';
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
class RestaurantHomePage extends StatelessWidget {
  const RestaurantHomePage({Key? key}) : super(key: key);

  final Map<String, List<String>> menuByCountry = const {
    '‡πÑ‡∏ó‡∏¢': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏°‡∏±‡∏ô‡∏ü‡∏∑‡πâ‡∏î'],
    '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô': ['‡∏ã‡∏π‡∏ä‡∏¥', '‡∏£‡∏≤‡πÄ‡∏°‡∏á', '‡∏ó‡∏á‡∏Ñ‡∏±‡∏ï‡∏™‡∏∂', '‡πÄ‡∏ó‡∏°‡∏õ‡∏∏‡∏£‡∏∞', '‡∏≠‡∏∏‡∏î‡πâ‡∏á'],
    '‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ': ['‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤', '‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡∏ï‡∏ï‡∏µ', '‡∏•‡∏≤‡∏ã‡∏≤‡∏ô‡∏ç‡πà‡∏≤', '‡∏£‡∏¥‡∏ã‡∏≠‡∏ï‡πÇ‡∏ï‡πâ', '‡πÄ‡∏à‡∏•‡∏≤‡πÇ‡∏ï‡πâ'],
    '‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢': ['‡πÅ‡∏Å‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà', '‡∏ô‡∏≤‡∏ô', '‡∏ö‡∏µ‡∏£‡πå‡∏¢‡∏≤‡∏ô‡∏µ', '‡∏ó‡∏±‡∏ô‡∏î‡∏π‡∏£‡∏µ', '‡πÑ‡∏ä‡∏ô‡πå'],
    '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ': ['‡∏Å‡∏¥‡∏°‡∏à‡∏¥', '‡∏ö‡∏¥‡∏ö‡∏¥‡∏°‡∏ö‡∏±‡∏ö', '‡∏ö‡∏∏‡∏•‡πÇ‡∏Å‡∏Å‡∏¥', '‡∏ó‡∏≠‡∏Å‡∏ö‡∏Å‡∏Å‡∏¥', '‡∏Ñ‡∏¥‡∏°‡∏ö‡∏±‡∏ö'],
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)'),
        backgroundColor: Colors.orange,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.orange.shade50, Colors.white],
          ),
        ),
        child: ListView.builder(
          padding: const EdgeInsets.all(16.0),
          itemCount: menuByCountry.keys.length,
          itemBuilder: (context, index) {
            final country = menuByCountry.keys.elementAt(index);
            final dishes = menuByCountry[country]!;

            String countryIcon = _getStaticCountryIcon(country);
            
            return Card(
              margin: const EdgeInsets.only(bottom: 12),
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16),
                  gradient: LinearGradient(
                    colors: [Colors.white, Colors.grey.shade50],
                  ),
                ),
                child: ListTile(
                  contentPadding: const EdgeInsets.all(16),
                  leading: Container(
                    width: 60,
                    height: 60,
                    decoration: BoxDecoration(
                      color: Colors.orange.shade100,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Text(
                        countryIcon,
                        style: const TextStyle(fontSize: 28),
                      ),
                    ),
                  ),
                  title: Text(
                    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£$country',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.grey[800],
                    ),
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Text(
                        '${dishes.length} ‡πÄ‡∏°‡∏ô‡∏π',
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  trailing: Container(
                    decoration: BoxDecoration(
                      color: Colors.orange,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    padding: const EdgeInsets.all(8),
                    child: const Icon(
                      Icons.arrow_forward_ios,
                      color: Colors.white,
                      size: 16,
                    ),
                  ),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => CategoryDetailPage(
                          country: country,
                          dishes: dishes, restaurant: Restaurant(
                            id: 0,
                            name: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                            cuisine: '',
                            rating: 0.0,
                            deliveryTime: '0-0',
                            deliveryFee: 0,
                            image: '',
                            popular: false,
                            dishes: [],
                            country: country,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  String _getStaticCountryIcon(String country) {
    switch (country) {
      case '‡πÑ‡∏ó‡∏¢':
        return 'üáπüá≠';
      case '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô':
        return 'üáØüáµ';
      case '‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ':
        return 'üáÆüáπ';
      case '‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢':
        return 'üáÆüá≥';
      case '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ':
        return 'üá∞üá∑';
      default:
        return 'üçΩÔ∏è';
    }
  }
}